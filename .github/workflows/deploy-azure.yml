name: Deploy to Azure Container Apps

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  REGISTRY_NAME: qsocopilotregistry
  RESOURCE_GROUP: QsoCopilot
  CONTAINER_APP_ENV: qsocopilot-env
  LOCATION: switzerlandnorth

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Build and push Backend image
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
    
    - name: Build and push Backend Docker image
      run: |
        docker build -t ${{ env.REGISTRY_NAME }}.azurecr.io/qso-backend:${{ github.sha }} ./backend
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/qso-backend:${{ github.sha }}

    - name: Build and push Frontend Docker image (temporary)
      run: |
        # Build frontend avec placeholder pour commencer
        docker build -t ${{ env.REGISTRY_NAME }}.azurecr.io/qso-frontend:${{ github.sha }}-temp ./frontend
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/qso-frontend:${{ github.sha }}-temp

    - name: Create Container Apps Environment
      run: |
        az containerapp env create \
          --name ${{ env.CONTAINER_APP_ENV }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --location ${{ env.LOCATION }}

    - name: Deploy Backend Container App
      run: |
        az containerapp create \
          --name qso-backend \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --environment ${{ env.CONTAINER_APP_ENV }} \
          --image ${{ env.REGISTRY_NAME }}.azurecr.io/qso-backend:${{ github.sha }} \
          --registry-server ${{ env.REGISTRY_NAME }}.azurecr.io \
          --registry-username ${{ secrets.ACR_USERNAME }} \
          --registry-password ${{ secrets.ACR_PASSWORD }} \
          --target-port 8080 \
          --ingress external \
          --env-vars ASPNETCORE_ENVIRONMENT=Production ASPNETCORE_URLS=http://+:8080 ConnectionStrings__MongoDB="${{ secrets.MONGODB_CONNECTION_STRING }}" \
          --cpu 0.5 \
          --memory 1.0Gi \
          --min-replicas 1 \
          --max-replicas 3

    - name: Deploy Frontend Container App
      run: |
        az containerapp create \
          --name qso-frontend \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --environment ${{ env.CONTAINER_APP_ENV }} \
          --image ${{ env.REGISTRY_NAME }}.azurecr.io/qso-frontend:${{ github.sha }}-temp \
          --registry-server ${{ env.REGISTRY_NAME }}.azurecr.io \
          --registry-username ${{ secrets.ACR_USERNAME }} \
          --registry-password ${{ secrets.ACR_PASSWORD }} \
          --target-port 80 \
          --ingress external \
          --cpu 0.25 \
          --memory 0.5Gi

    - name: Rebuild and Update Frontend with correct Backend URL
      run: |
        # Récupérer l'URL réelle du backend
        BACKEND_URL=$(az containerapp show --name qso-backend --resource-group ${{ env.RESOURCE_GROUP }} --query properties.configuration.ingress.fqdn -o tsv)
        echo "Real Backend URL: https://$BACKEND_URL"
        
        # Rebuilder le frontend avec la vraie URL
        cd frontend
        sed -i "s|__API_URL_PLACEHOLDER__|https://$BACKEND_URL/api|g" .env.production
        docker build -t ${{ env.REGISTRY_NAME }}.azurecr.io/qso-frontend:${{ github.sha }} .
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/qso-frontend:${{ github.sha }}
        
        # Mettre à jour le Container App avec la nouvelle image
        az containerapp update \
          --name qso-frontend \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --image ${{ env.REGISTRY_NAME }}.azurecr.io/qso-frontend:${{ github.sha }}
